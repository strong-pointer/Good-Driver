We will be using pip as our Python package manager. More information can be found here: https://pypi.org/project/pip/
Using pip, we can install Django like so:   ~ python -m pip install Django
-------------------- End of Commit 1 --------------------

As for our overall tech stack for this project to be a functioning web application, we will need these tools:
- Git (Cheatsheet: https://education.github.com/git-cheat-sheet-education.pdf)
- IDE, VSCode is perfect
- Python w/ pip (Windows installation tutorial: https://www.tomshardware.com/how-to/install-python-on-windows-10-and-11#:~:text=Open%20a%20browser%20to%20the%20Python%20website%20and%20download%20the%20Windows%20installer.&text=2.,on%20Install%20now%20to%20begin.)
- Django (Python web framework)
- Virtual Environment (venv: https://docs.python.org/3/library/venv.html)
- Nginx (Open source web server/Load Balancer)
- AWS RDS w/ MySQL
- MySQL Workbench (https://www.mysql.com/products/workbench/), or an equivalent MySQL tool
-------------------- End of Commit 2 --------------------

https://towardsdatascience.com/the-good-way-to-structure-a-python-project-d914f27dfcc9
Tips for keeping our Python project organized:
- Using a virtual environment to keep dependencies/packages isolated
    Once the directory is created, here is a summary of commands for Virtual Environment (venv):
        1. python3 -m venv venv → creates a virtual environment
        2. source venv/bin/activate → activates the environment
        3. deactivate → deactivates the environment

    In a nutshell, virtual environments allow you to:
    1. Maintain dependencies isolated. This avoids situations where you have projects using different package versions and you globally 
        uninstalling/reinstalling what you need every time you need to run a project.
    2. Share your dependencies with other people.

    Once you have installed all the packages that your project needs, you can run:
        pip freeze > requirements.txt
    pip freeze is “freezing” all the packages/versions currently being used. Then you are piping (i.e., saving) the output of pip freeze via a txt file.
    Other people using your program will then run:
        pip install -r requirements.txt

- Create different directories/folders for content
    To keep things separated, put __init__.py (empty) files
        __init__.py is used to mark directories as Python package directories
        TIP: If you remove the __init__.py file, Python will no longer look for submodules 
            inside that directory. Hence, if you try to import the module somewhere else, it will fail.

    To access other modules/code from another python file or folder:
        If we have a file structure something like this:
        another_directory/__init__.py
        another_directory/module.py

        Python code:
        # you can import the code in module.py as
        from another_directory import module
        # or
        import another_directory.module
-------------------- End of Commit 3 --------------------

After cloning an Azure DevOps repository to your local machine (with: git clone <repo>), you can make changes, stage them, and commit them to the repository. Here's the general process:

1. Make changes to the files in the local repository.
2. Stage the changes using the following command:
	git add <file1> <file2> ... OR git add * (to add all)
	Where <file1>, <file2>, etc., are the names of the files you want to stage.
3. Commit the changes using the following command:
	git commit -m "<message>"
	Where <message> is a descriptive message about the changes you are committing.
4. Push the committed changes to the remote repository using the following command:
	git push origin <branch>
	Where <branch> is the name of the branch you want to push your changes to. By default, this is usually the master branch.
That's it! You have successfully pushed and committed changes to the Azure DevOps repository using Git.

WARNING: Before pushing changes, make sure that you have the latest version of the repository on your local machine by running "git pull" to avoid any merge conflicts.
-------------------- End of Commit 5 --------------------

https://www.guguweb.com/2020/04/20/remote-debugging-a-django-project-in-vs-code/
There are a couple of options for remote debugging of Django-based web applications, here are some of the popular ones:
	1. Django Debug Toolbar: A configurable set of panels that display various debug information about the current request/response. (https://www.tutorialspoint.com/how-to-add-django-debug-toolbar-to-your-project)
	2. Visual Studio Code over SSH: Another popular IDE with debugging support, including remote debugging for Django.
It seems like based on our goals, the best debugger is the one we can use with the least amount of learning curve and downloads as possible. 
	That leads me to the idea that #1, the Django Debug Toolbar, is our best choice currently.
-------------------- End of Commit 6 --------------------

After researching Nginx alongside Django, it looks like a lot of people recommend adding an intermediary service such as Gunicorn, but that is more for
	larger systems that get A LOT more traffic than we ever will on this project. So, we will just be using Nginx and Django for our case.
What Nginx does: would directly handle incoming requests, process them, and serve the responses generated by your Django application.

Once we have our Django application/server up and running on our EC2 instance in the future, we can add our Nginx web server:
1. Install Nginx: You need to install Nginx on your server. You can do this using a package manager like "sudo apt-get install nginx"
2. Configure Nginx: You need to configure Nginx to serve your Django application. You can do this by creating an Nginx configuration file that specifies the server and location blocks for your application. 
	Here's an example configuration file:
	server {
    		listen 80;
    		server_name example.com;
    		location / {
        		proxy_pass http://127.0.0.1:8000;
        		proxy_set_header Host $host;
        		proxy_set_header X-Real-IP $remote_addr;
    		}
	}
	In this example, Nginx is configured to listen on port 80 and to proxy requests to your Django application running on http://127.0.0.1:8000.
3. Start Nginx: You need to start Nginx so that it can begin serving your application. 
	You can do this using the systemctl start nginx command (for systemd-based systems) or the service nginx start command (for SysV-based systems).
4. Start Django: You need to start your Django application so that it can receive incoming requests from Nginx. You can do this by running the python manage.py runserver command.
5. Test: You should test your application by visiting your domain name or IP address in a web browser. You should see the default Django landing page if everything is working correctly.
-------------------- End of Commit 7 --------------------

Libraries/Packages:
1. venv (Virtual Environment): comes with Python, so you should already have it. To make a venv,: python -m venv <name of venv>
	Once the venv is active, we can install the other packages we need using pip, but for now, we are just using Django.
	Only installing packages within a venv is best practice due to them not affecting your system Python installation/other venvs.
	It also removes dependency/package conflicts between different projects.
2. Django: pip install django
3. MySQLClient: pip install mysqlclient
	Once this is installed, we can use it with Django to connect to our MySQL db to perform the operations on it.
	We need to add this code to our Django settings file to configure the db connection:
	DATABASES = {
    		'default': {
        		'ENGINE': 'django.db.backends.mysql',
        		'NAME': 'your_database_name',
        		'USER': 'your_database_user',
        		'PASSWORD': 'your_database_password',
        		'HOST': 'your_database_host',
        	'PORT': 'your_database_port',
    		}
	}
4. Nginx: sudo apt-get install nginx
5. More libraries/packages to come as we start development!
-------------------- End of Commit 8 --------------------

For eBay API Python SDK: pip install ebaysdk